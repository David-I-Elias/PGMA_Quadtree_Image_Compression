import numpy as np
from operator import add
from functools import reduce
import sys


def readpgma(name):
    with open(name) as f:
        lines = f.readlines()

    for l in list(lines):
        if l[0] == '#':
            lines.remove(l)

    assert lines[0].strip() == 'P2'
    pgma_data = []
    for line in lines[1:]:
        pgma_data.extend([int(c) for c in line.split()])
    return np.array(pgma_data[3:]), (pgma_data[1], pgma_data[0]), pgma_data[2]


def writepgma(file_name, comment, width, height, maxval, pgma):
    file_type = 'P2'

    file_handle = open(file_name, 'wt')
    file_handle.write("%s\n" % (file_type))
    file_handle.write("#%s\n" % (comment))
    file_handle.write("%d %d\n" % (width, height))
    file_handle.write("%d\n" % (maxval))

    for i in range(height):
        for j in range(width):
            file_handle.write("%d " % (pgma[i, j]))
        file_handle.write("\n")

    file_handle.close()

    return


def quadrantSplit(image):
    half_split = np.array_split(image, 2)
    res = map(lambda x: np.array_split(x, 2, axis=1), half_split)
    return reduce(add, res)


def concatenateQuadrants(north_west, north_east, south_west, south_east):
    top = np.concatenate((north_west, north_east), axis=1)
    bottom = np.concatenate((south_west, south_east), axis=1)
    return np.concatenate((top, bottom), axis=0)


def calculate_mean(img):
    return np.mean(img, axis=(0, 1))


def checkIfEqual(checkList):
    first = checkList[0]
    return all((x == first).all() for x in checkList)


class QuadTree:

    def insert(self, img, variance=0):
        self.level = variance
        self.mean = calculate_mean(img).astype(int)
        self.resolution = (img.shape[0], img.shape[1])
        self.final = True

        if not checkIfEqual(img):
            split_img = quadrantSplit(img)

            self.final = False
            self.north_west = QuadTree().insert(split_img[0], variance + 1)
            self.north_east = QuadTree().insert(split_img[1], variance + 1)
            self.south_west = QuadTree().insert(split_img[2], variance + 1)
            self.south_east = QuadTree().insert(split_img[3], variance + 1)

        return self

    def get_image(self, level):
        if self.final or self.level == level:
            return np.tile(self.mean, (self.resolution[0], self.resolution[1], 1))

        return concatenateQuadrants(
            self.north_west.get_image(level),
            self.north_east.get_image(level),
            self.south_west.get_image(level),
            self.south_east.get_image(level))


class main:
    file_name = sys.argv[1]
    variance_threshold = sys.argv[2]

    if int(variance_threshold) < 0 or int(variance_threshold) > 1028:
        print("Variance threshold error: variance threshold should be a value between 0 and 1028")
        sys.exit(-1)
    if 'pgma' not in file_name:
        print("Incorrect file format: File must be .pgma format")
        sys.exit(-1)

    pgma = readpgma(file_name)
    full_img = np.reshape(pgma[0], pgma[1])
    quadtree = QuadTree().insert(full_img)

    image_data = quadtree.get_image(int(variance_threshold))

    writepgma('ImageVT-' + str(variance_threshold) + '.pgma', ' GENERATED BY DAVID ELIAS', 512, 512, 255, image_data)
    print("Image with Variance Threshold: " + str(variance_threshold) + " printed to folder as 'ImageVT-" +
          str(variance_threshold) + ".pgma'")
